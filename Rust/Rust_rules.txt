
Ownership:

1. Every value is "owned" by a single variable, argument, struct, vector, etc. at a time.

2. Reassigning the value to a variable, passing it to a function, putting it into a vector, etc., moves the value. The old owner can't be used to access the value anymore!

Borrowing:

3. You can create many read-only references to a value that exist at the same time. These refs can all exist at the same time.

4. You can't move a value while a ref to the value exists.

5. You can make a writeable (mutable) reference to a value only if there are no read-only references currently in use. One mutable ref to a value can exist at a time.

6. You can't mutate a value through the owner when any ref (mutable or immutable) to the value exists.

7. Some types of values are copied instead of moved (numbers, bools, chars, arrays/tuples with copyable elements).

Lifetimes:

8. When an owner goes out of scope, the value owned by it is dropped (cleaned up in memory).

9. There can't be references to a value when its owner goes out of scope.

10. References to a value can't outlive the value they refer to.

11. These rules will dramatically change how you write code (compared to other languages).

12. When in doubt, remember that Rust wants to minimize unexpected updates to data.